ASSUNTO:

	Object.keys;
	
	Object.entries;
	
	Object.assign;
	
	Object.values.
	
THROW

	Uma função, caso tenha a sua funcionalidade prejudicada pelo usuário, deve poder retornar o erro, para o programador poder analisa-lo
	e melhor conserta-lo. Para isso, usamos o Throw, que retorna no console o local do erro.
	
	Exemplo: 
		const sum = (value1, value2) => {
  	if (typeof value1 !== 'number' || typeof value2 !== 'number') {
    	throw new Error('Os valores devem ser numéricos'); -> 'O THROW NEW ERROR SUBSTITUI O -RETURN-'
 	 }
 	 return value1 + value2;
	};

	console.log(sum(2, '3'));
	
	
TRY AND CATCH
	O try é usado para tentar rodar o código com sucesso, enquanto o catch é chamado caso ocorra um erro.
	
	
	const verifyIsNumber = (value1, value2) => {
	  if (typeof value1 !== 'number' || typeof value2 !== 'number') {
	    throw new Error('Os valores devem ser numéricos');
	  }
	};

	const sum = (value1, value2) => {
 	 try {
 	   verifyIsNumber(value1, value2);
	    return value1 + value2;
	  } catch (error) {
	    throw error.message;
	  }
	};

	console.log(sum(2, '3'));
	
	
OBJECT.KEYS

	Uma forma de percorrer arrays, sem fazer uso de um FOR.
	
	const coolestTvShow = {
  	name: "BoJack Horseman",
  	genre: "adult animation",
  	createdBy: "Raphael Bob-Waksberg",
  	favoriteCharacter: "Princess Carolyn",
 	quote: "Princess Carolyn always lands on her feet.",
  	seasons: 6,
	};
	
	console.log(Object.keys(coolestTvShow));
	// [ 'name', 'genre', 'createdBy', 'favoriteCharacter', 'quote', 'seasons' ]
	
OBJECT.VALUES
	
	Mesma coisa do KEYS, mas retornando os próprios valores:
	
	const student = {
 	 Html: 'Muito Bom',
	  Css: 'Bom',
	  JavaScript: 'Ótimo',
	  SoftSkill: 'Ótimo',
	};

	const listSkillsValuesWithFor = (student) => {
  	const skills = [];
	  for(skill in student) {
	    skills.push(student[skill]);
	  }

	  return skills;
	};

	const listSkillsValuesWithValues = (student) => Object.values(student);

	// Sem Object.values
	console.log(listSkillsValuesWithFor(student));

	// Com Object.values
	console.log(listSkillsValuesWithValues(student));
	
OBJECT.ENTRIES

	Mesma coisa do KEYS e VALUES, mas esse mostra os dois. A lógica desse comando é mostrar quais dados foram inseiros. Tipo em um formulário, onde a pessoa colocou nome, sobrenome, idade, sexo, o ENTRIES retorna todas essas chaves, com os valores inseridos pelos usuários.
	
	const coolestTvShow = {
  	name: "BoJack Horseman",
  	genre: "adult animation",
 	createdBy: "Raphael Bob-Waksberg",
  	favoriteCharacter: "Princess Carolyn",
 	quote: "Princess Carolyn always lands on her feet.",
	seasons: 6,
	};

	console.log(Object.entries(coolestTvShow));

	// [
	//   [ 'name', 'BoJack Horseman' ],
	//   [ 'genre', 'adult animation' ],
	//   [ 'createdBy', 'Raphael Bob-Waksberg' ],
	//   [ 'favoriteCharacter', 'Princess Carolyn' ],
	//   [ 'quote', 'Princess Carolyn always lands on her feet.' ],
	//   [ 'seasons', 6 ]
	// ]
	
OBJECT ASSIGN

	Esse método é utilizado para copiar os valores de todas as propriedades de um ou mais objetos para um objeto destino. Sua estrutura é:
	
	// A função recebe um número qualquer de parâmetros. Todos são agregados como valores para adicionar ao objeto de destino!

	Object.assign(destino, objeto1);
	Object.assign(destino, objeto1, objeto2);
	Object.assign(destino, objeto1, objeto2, objeto3, objeto4);
	
	EXEMPLO DE UTILIZAÇÃO
	
	const person = {
	  name: 'Alberto',
	  lastName: 'Gomes',
	  age: 20,
	};
	
	const info = {
	  age: 23,
	  job: 'engenheiro',
	};
	
	const family = {
	  children: ['Maria', 'João'],
	  wife: 'Ana',
	};
	
	Object.assign(person, info, family)
	console.log(person)
	
	/* Output
	  { name: 'Alberto',
	  lastName: 'Gomes',
	  age: 23,
	  job: 'engenheiro',
	  children: [ 'Maria', 'João' ],
	  wife: 'Ana'
	  } */
	  
	  
